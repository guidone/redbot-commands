/*!
 * Name: commands
 * Id: commands
 * Version: 1.3.1
 * Description: Show some predefined contents in Mission Control after some command-like messages from the user (for example /privacy, /terms, etc).
 * Author: Guido Bellomo (https://github.com/guidone)
 * Repository: https://github.com/guidone/red-bot-commands
 */
define(["react","code-plug","../../src/components","prop-types","rsuite","../../../src/components","lodash"],(e,t,n,o,a,r,l)=>(()=>{"use strict";var m={570:e=>{e.exports=r},727:e=>{e.exports=n},737:e=>{e.exports=t},980:e=>{e.exports=l},207:e=>{e.exports=o},650:t=>{t.exports=e},131:e=>{e.exports=a}},s={};function c(e){var t=s[e];if(void 0!==t)return t.exports;var n=s[e]={exports:{}};return m[e](n,n.exports,c),n.exports}c.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return c.d(t,{a:t}),t},c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),c.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};return(()=>{c.r(i),c.d(i,{default:()=>S});var e=c(650),t=c.n(e),n=c(737),o=c(727),a=c(207),r=c.n(a),l=c(131),m=c(570),s=c(980),d=c.n(s);const{StringType:u,ArrayType:p,ObjectType:g}=l.Schema.Types,f=l.Schema.Model({commands:p().of(g().shape({command:u().isRequired("Specify the command").addRule(e=>e.startsWith("/"),'Command should start with "/"'),slug:u()})).addRule(e=>{const t=e.map(e=>e.command);return d().uniq(t).length===t.length},"Some contents have the same command")}),b=({value:e,onChange:n,disabled:o=!1})=>t().createElement(l.FlexboxGrid,{justify:"space-between"},t().createElement(l.FlexboxGrid.Item,{colspan:8},t().createElement(l.Input,{value:e.command,placeholder:"/command",onChange:t=>n({...e,command:t})})),t().createElement(l.FlexboxGrid.Item,{colspan:15},t().createElement(m.ContentAutocomplete,{disabled:o,useSlug:!0,canCreate:!0,value:e.slug,fluid:!0,onChange:t=>n({...e,slug:t})})));b.propTypes={value:r().shape({slug:r().string,command:r().string}),onChange:r().func,disabled:r().bool};const h=b,y=({value:n,onSubmit:o=(()=>{}),disabled:a=!1})=>{const[r,s]=(0,e.useState)(n),[c,i]=(0,e.useState)(null),d=(0,e.useRef)(null);return t().createElement("div",null,t().createElement(l.Form,{model:f,disabled:!0,formValue:r,formError:c,ref:d,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),i(null)},onCheck:e=>{i(e)}},t().createElement(l.FormGroup,null,t().createElement(l.ControlLabel,null,"Content Commands",t().createElement(l.HelpBlock,{tooltip:!0},"Select one or more content to be shown after a command-line message (like ",t().createElement("em",null,"/privacy"),", etc)")),t().createElement(l.FormControl,{name:"commands",accepter:m.CollectionEditor,form:h,labelAdd:"Add command",disabled:a,sortable:!1})),t().createElement(l.FormGroup,{style:{marginTop:"40px"}},t().createElement(l.ButtonToolbar,null,t().createElement(l.Button,{disabled:a,appearance:"primary",onClick:()=>{d.current.check()&&o(r)}},"Save configuration"),t().createElement(l.Button,{disabled:a,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(n)}},"Reset")))))};y.propTypes={onSubmit:r().func,disabled:r().bool,value:r().arrayOf(r().shape({command:r().string,slug:r().string}))};const E=y,{NodeRedNode:v,SlugHelp:C,TypeCommand:x}=o.HelpElements;(0,n.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"commands",label:"Commands",url:"/configuration-commands"}]}),(0,n.plug)("pages",(0,o.withConfigurationPage)("commands",E,{Legend:()=>t().createElement("div",null,t().createElement(v,null,"Commands"),t().createElement("p",null,"Use the this node to show some contents in response of some command-like messages from users, this is a perfect place to put some statics documents for pricacy or tos (for example ",t().createElement(x,null,"/privacy")," or ",t().createElement(x,null,"/terms"),")."),t().createElement(C,null)),title:"Commands"}),{permission:"configure",url:"/configuration-commands",title:"Commands",id:"configuration-commands"});const S={name:"command plugin"}})(),i})());